{"version":3,"sources":["shared/components/custom-button/CustomButton.js","components/episode-info/EpisodeInfo.js","components/comments/comment/Comment.js","components/comments/Comments.js","modules/public/episode/Episode.js"],"names":["theme","createMuiTheme","typography","button","palette","primary","light","main","dark","contrastText","secondary","useStyles","makeStyles","margin","spacing","CustomButton","variant","children","color","props","classes","className","EpisodeInfo","episode","play","React","useState","value","setValue","episodeNumber","name","Rating","onChange","event","newValue","description","Avatar","onClick","window","open","src","Divider","size","startIcon","Comment","comment","Typography","userName","style","width","textAlign","textJustify","content","Comments","episodeId","useContext","SecurityContext","user","isUserAuthenticated","comments","setComments","commentForm","setCommentForm","isMounted","setIsMounted","useEffect","http","get","API_ENDPOINTS","then","res","data","handleChange","e","target","handleClick","post","gutterBottom","map","key","_id","TextField","type","label","placeholder","multiline","rowsMax","InputProps","endAdornment","InputAdornment","position","IconButton","aria-label","to","Episode","id","useParams","setEpisode","playEpisode","EpisodeContext","publicEpisodes","imageUrl","alt","height","episodeSrc"],"mappings":"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","file":"static/js/8.fe0ccbfa.chunk.js","sourcesContent":["import React from 'react'\n\nimport { createMuiTheme, makeStyles, ThemeProvider } from '@material-ui/core/styles';\n\nimport Button from '@material-ui/core/Button';\n\nconst theme = createMuiTheme({\n  typography: {\n    button: {\n    }\n  },\n  palette: {\n    primary: {\n      light: '#757ce8',\n      main: '#ffc000',\n      dark: '#e2b11a',\n      contrastText: '#662c00',\n    },\n    secondary: {\n      light: '#ff7961',\n      main: '#f44336',\n      dark: '#ba000d',\n      contrastText: '#000',\n    },\n  },\n});\n\nconst useStyles = makeStyles((theme) => ({\n  margin: {\n    margin: theme.spacing(1),\n  },\n}));\n\nconst CustomButton = ({ variant, children, color, ...props }) => {\n  const classes = useStyles();\n  return (\n    <ThemeProvider theme={theme}>\n      <Button variant={variant} color={color} className={classes.margin} {...props}>\n        {children}\n      </Button>\n    </ThemeProvider>\n  )\n};\n\nexport default CustomButton;\n","import React from 'react';\n\nimport Rating from '@material-ui/lab/Rating';\nimport Divider from '@material-ui/core/Divider';\nimport Avatar from '@material-ui/core/Avatar';\nimport PlayArrow from '@material-ui/icons/PlayArrow';\nimport CustomButton from '../../shared/components/custom-button/CustomButton';\n\nimport './EpisodeInfo.scss';\n\nconst EpisodeInfo = ({ episode, play }) => {\n\n    const [value, setValue] = React.useState(5);\n\n    return (\n        <div className=\"episode-info\">\n            <section>\n                <h3 className=\"episode-number\">Episódio {episode.episodeNumber}</h3>\n                <h1 className=\"episode-title\">{episode.name}</h1>\n                <div className=\"subtitles\">\n                    <Rating\n                        name=\"simple-controlled\"\n                        value={value}\n                        onChange={(event, newValue) => {\n                            setValue(newValue);\n                        }}\n                    />\n                    <span className=\"episode-comments-number\">0 Comentários</span>\n                </div>\n            </section>\n            <section>\n                <div className=\"description\">\n                    <p>\n                        {episode.description}\n                    </p>\n                </div>\n            </section>\n\n            <section>\n                <div className=\"participants-avatars\">\n                    <Avatar\n                        className=\"avatar\"\n                        onClick={() => { window.open('https://www.instagram.com/tedmedeiros/')}}\n                        src=\"https://scontent.frec3-2.fna.fbcdn.net/v/t1.0-9/1902801_636278386432219_1791449983_n.jpg?_nc_cat=107&_nc_sid=09cbfe&_nc_eui2=AeHt935R5nmQhJ_QrOxX83ljf2Dc6a_Qbv5_YNzpr9Bu_rFlxWsIRkGnd_ESBemZsALsQiwFqVc-hi4fKRhIsX3O&_nc_ohc=h1yezMjpDFIAX8gRASw&_nc_ht=scontent.frec3-2.fna&oh=9b3de121377839bef34eebfde22e0ff0&oe=5F98FA57\">\n                        TI\n                    </Avatar>\n                </div>\n            </section>\n\n            <Divider variant=\"middle\" className=\"divider\" />\n\n            <section>\n                <div className=\"buttons\">\n                    <CustomButton\n                        variant=\"contained\"\n                        color=\"primary\"\n                        size=\"large\"\n                        onClick={play}\n                        startIcon={<PlayArrow />}\n                    >\n                        Ouvir\n                    </CustomButton>\n                </div>\n\n            </section>\n\n        </div>\n    );\n}\n\nexport default EpisodeInfo;","import React from 'react';\n\nimport Typography from '@material-ui/core/Typography';\n\nimport './Comment.scss';\n\nconst Comment = ({ comment }) => {\n    return (\n        <div className=\"comment\">\n            <Typography className=\"comment-user-name\" variant=\"subtitle1\" >\n                {comment.userName}\n            </Typography>\n            <p style={{ width: '100%', textAlign: 'start', textJustify: 'justify !important' }}>\n                {comment.content}\n            </p>\n        </div>\n    )\n}\n\nexport default Comment;","import React, { useState, useEffect, useContext } from 'react'\n\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Send from '@material-ui/icons/Send';\nimport http from '../../core/http/axios';\nimport SecurityContext from '../../contexts/SecurityContext';\n\nimport './Comments.scss';\n\nimport TextField from '@material-ui/core/TextField';\n\nimport Comment from './comment/Comment';\nimport API_ENDPOINTS from '../../core/http/api-endpoints';\nimport {\n    Link,\n} from \"react-router-dom\";\n\nconst Comments = ({ userName, episodeId }) => {\n\n    const { user, isUserAuthenticated } = useContext(SecurityContext);\n    const [comments, setComments] = useState([]);\n    const [commentForm, setCommentForm] = useState({\n        userName: user ? user.name : null, episodeId: episodeId, content: ''\n    });\n    const [isMounted, setIsMounted] = useState(true);\n\n    useEffect(() => {\n        http.get(`${API_ENDPOINTS.comments}/${episodeId}`).then(res => {\n            if (isMounted) {\n                setComments(res.data);\n            }\n        })\n        return () => { setIsMounted(false) };\n    }, [comments, episodeId, isMounted])\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setCommentForm({ ...commentForm, [name]: value });\n    }\n\n    const handleClick = () => {\n        http.post(API_ENDPOINTS.comments, commentForm).then(res => {\n            setCommentForm({ userName: user ? user.name : null, episodeId: episodeId, content: '' })\n            http.get(`${API_ENDPOINTS.comments}/${episodeId}`).then(res => {\n                setComments(res.data);\n            })\n        })\n    }\n\n    const newComment = () => {\n        return (\n            <form>\n                <TextField\n                    name=\"content\"\n                    type=\"text\"\n                    label=\"Escreva um Comentário\"\n                    placeholder=\"Comentário\"\n                    variant=\"outlined\"\n                    value={commentForm.content}\n                    multiline\n                    style={{ width: '100%' }}\n                    rowsMax={3}\n                    onChange={handleChange}\n                    InputProps={{\n                        endAdornment: (\n                            <InputAdornment position=\"end\">\n                                <IconButton aria-label=\"Enviar Comentário\" onClick={handleClick}>\n                                    <Send />\n                                </IconButton>\n                            </InputAdornment>\n                        )\n                    }}\n                />\n            </form>\n        );\n    }\n\n    const noUserComment = () => {\n        return (\n            <Typography className=\"comments-title\" variant=\"body1\" gutterBottom>\n                Para comentar se conecte ou realize o cadastro <Link to=\"/login\">aqui</Link>\n            </Typography>\n        );\n    }\n\n    return (\n        <div className=\"comments-section\">\n            <Typography className=\"comments-title\" variant=\"h6\" gutterBottom>\n                Comentários\n            </Typography>\n\n            <div className=\"comments-list\">\n                {comments.map(comment => <Comment key={comment._id} comment={comment} />)}\n                <div className=\"new-comment\">\n                    {isUserAuthenticated() ? newComment() : noUserComment()}\n                </div>\n            </div>\n\n\n\n        </div>\n    );\n}\n\nexport default Comments;","import React, { useState, useEffect, useContext } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\n\nimport http from '../../../core/http/axios';\nimport API_ENDPOINTS from '../../../core/http/api-endpoints';\n\nimport EpisodeContext from '../../../contexts/EpisodeContext';\n\nimport EpisodeInfo from '../../../components/episode-info/EpisodeInfo';\nimport Comments from '../../../components/comments/Comments';\n\nimport './Episode.scss';\n\nconst Episode = (props) => {\n\n    let { id } = useParams();\n    const [episode, setEpisode] = useState([]);\n    const { playEpisode } = useContext(EpisodeContext);\n\n\n    useEffect(() => {\n        http.get(`${API_ENDPOINTS.publicEpisodes}/${id}`).then(res => {\n            return res.data;\n        }).then(res => {\n            setEpisode(res);\n        });\n    }, [id]);\n\n    return (\n        <div className=\"episode-container\">\n            <section>\n                <div className=\"episode\">\n                    <div className=\"image\">\n                        <LazyLoadImage\n                            src={episode.imageUrl}\n                            alt={episode.name} width={500} height={600} />\n                    </div>\n                    <div className=\"info\">\n                        <EpisodeInfo episode={episode} play={() => playEpisode(episode.episodeSrc)} />\n                    </div>\n                </div>\n            </section>\n            <section>\n                <div className=\"comments-row\">\n                    <div className=\"comments\">\n                        <Comments episodeId={id} />\n                    </div>\n                </div>\n            </section>\n\n        </div>\n    );\n\n}\n\nexport default Episode;"],"sourceRoot":""}